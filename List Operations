package code.utilities;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;

class ListOperations {

	@Test
	void testArrayOperations() {
		// finding duplicates
		List<Integer> input1 = dataGenerator(1000, 1000);
		verifyInput(input1);
		List<Integer> outputList = getDuplicates(input1);
		if (outputList.size() > 0) {
			System.out.println("Input1 contains duplicates");
		}
		System.out.println("Input List:\n" + input1);
		System.out.println("\n Output List of Duplicates:" + outputList);

		// building another input set
		List<Integer> input2 = dataGenerator(1000, 1000);
		verifyInput(input2);

		// find intersection
		ArrayList<Integer> intersectList = new ArrayList<Integer>(input1);
		intersectList.removeAll(input2);
		List<Integer> distinctIntersectedList = intersectList.stream().distinct().collect(Collectors.toList());
		System.out.println("Intersected List:\n" + distinctIntersectedList);
		assertEquals(0, getDuplicates(distinctIntersectedList).size());
	}

	private List<Integer> getDuplicates(List<Integer> input) {
		List<Integer> outputList = new ArrayList<>();
		Map<Integer, Integer> map = new LinkedHashMap<>();
		for (int i : input) {
			if (map.containsKey(i)) {
				map.put(i, map.get(i) + 1);
			} else {
				map.put(i, 1);
			}
		}
		for (Entry<Integer, Integer> entry : map.entrySet()) {
			if (entry.getValue() > 1) {
				outputList.add(entry.getKey());
			}
		}
		return outputList;
	}

	private void verifyInput(List<Integer> input) {
		boolean lengthFlag = true;
		assertEquals(1000, input.size());
		for (int i : input) {
			if (i > 1000) {
				lengthFlag = false;
			}
		}
		assertTrue(lengthFlag);
	}

	private List<Integer> dataGenerator(int size, int bound) {
		List<Integer> numbers = new ArrayList<>(size);
		Random random = null;
		for (int i = 0; i < size; i++) {
			random = new Random();
			numbers.add(random.nextInt(bound));
		}
		return numbers;
	}
}
